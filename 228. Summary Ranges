/**
Given a sorted integer array without duplicates, return the summary of its ranges.

For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].

*/

public class Solution {
    public List<String> summaryRanges(int[] nums) {
        ArrayList<String> list= new ArrayList();
        
        if(nums.length!=0){
        int start = 0;
        int end = 1;
        String result = ""+nums[start];
        for(; end<nums.length;){
            if(nums[end]-nums[start]!=1){
                 if(result.equals(""+nums[start])){
                list.add(result);
            }else{
                result = result+"->"+nums[start];
                list.add(result);
            }
                start = end;
                end++;
                result = ""+nums[start];
            }
            else{
                end++;
                start++;
            }
        }
            if(result.equals(""+nums[start])){
                list.add(result);
            }else{
                result = result+"->"+nums[start];
                list.add(result);
            }
            
           
        }
         return list;           
    }
}

public class Solution {
public List<String> summaryRanges(int[] nums) {
    List<String> ret = new ArrayList<>();

    for(int start = 0, end =0; start<nums.length; ){
        end = start;
        while(end < nums.length -1 && nums[end] +1 == nums[end +1])
            end ++;

        // make range
        ret.add(start == end? 
            ""+nums[end] : 
            ""+nums[start]+"->"+nums[end]);
        start = end +1;
    }

    return ret;
}

List<String> list=new ArrayList();
    if(nums.length==1){
        list.add(nums[0]+"");
        return list;
    }
    for(int i=0;i<nums.length;i++){
        int a=nums[i];
        while(i+1<nums.length&&(nums[i+1]-nums[i])==1){
            i++;
        }
        if(a!=nums[i]){
            list.add(a+"->"+nums[i]);
        }else{
            list.add(a+"");
        }
    }
    return list;